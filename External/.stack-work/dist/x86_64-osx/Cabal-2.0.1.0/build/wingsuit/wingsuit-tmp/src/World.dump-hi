
==================== FINAL INTERFACE ====================
2018-04-21 17:17:25.218476 UTC

interface main:World 8022
  interface hash: 878a69f337c77fa5050996601e162ebb
  ABI hash: 981e840c22727921992edae4064a9d80
  export-list hash: 016924779c634a7cc34ef8870d1881d4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d7c563f0c2081cbfc8a99503f5883d3b
  sig of: Nothing
  used TH splices: True
  where
exports:
  World.blocks
  World.create
  World.handle
  World.player
  World.render
  World.step
  World.time
  World.World
module dependencies: Base Block Level Player
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.13
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 adjunctions-4.4 array-0.5.2.0 base-4.10.1.0
                      base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1 bmp-1.2.6.3
                      bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.3
                      containers-0.5.10.2 contravariant-1.4.1 deepseq-1.4.3.0
                      distributive-0.5.3 exceptions-0.8.3 fixed-0.2.1.1 free-5.0.1
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 hashable-1.2.7.0
                      integer-gmp-1.0.1.0 kan-extensions-5.1 lens-4.16.1 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.3
                      semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 th-abstraction-0.2.6.0
                      transformers-0.5.2.0 transformers-base-0.4.4
                      transformers-compat-0.5.1.4 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         base-orphans-0.7:Data.Orphans
         transformers-0.5.2.0:Control.Monad.Trans.Error
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Arrow b4ff99f516cf3ba87a1e4985dc7f496f
import  -/  base-4.10.1.0:Data.Bool f6ec3e184083b7bd51c5922a7bdc5c9f
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Function e8e43d925cd2e5608dfc5d809f4ae5e4
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture 094569b26fc286aa3a5e9a7de50bb734
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Backend.Types 51761c8fbc3adc4e56d791e3033a0de1
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event a404c1b25d7ac94aba4f70372db09d2e
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Color b996ae71d8859d230763c9d9f29aeedf
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture 4cfdf48333d4da0b95ccc85f821990f9
import  -/  lens-4.16.1:Control.Lens.Getter c35decfdb371768220da83f721a88717
import  -/  lens-4.16.1:Control.Lens.Setter 226990dac6ea3001e18d1279780ff75e
import  -/  lens-4.16.1:Control.Lens.TH 27283fec2c9c197888588e6fd8cbf26e
import  -/  lens-4.16.1:Control.Lens.Type aa7a812db6d306498bb9b92023fe6f42
import  -/  Base 11cb7d834f2f99b375feed45c987dbb0
  exports: 0ae00316f74b1d214781093a67933a66
import  -/  Block 222cedfddedea4472d67745d44b3f8c4
  exports: eaf9bf27707736eeaeb7019657988cbf
  Block 5835155301605e8a91db85074b0f6eff
  inBlock f9b589513140d7470fac221e717c89c2
  render 19347d43798eb020b7e850dcc46f3601
import  -/  Level 956bf00399e1de03c905dde8967ee954
  exports: 2020eac753e56bd479c2a8920666da38
  Level b4790cf87a28d25b414ee3f250e03c03
  blocks 2d2aebed4466e3ea5d524a16c5753d7f
  finish 7d0bd06e8578a30615289144912f8907
  start a37328759cd9a69e84c6b73a233c1c38
import  -/  Player 3e6739225a30abf4aea9ecfc2d972f9b
  exports: dc270cca6c68bb502908d6ea2c2a66fb
  Player 4bef3427f6f3ab786fec0b1fa8976fa1
  create a829df345e1cdbadab9b09ff92c8f5cc
  handle 034b58d687bc080d479dd2a9f819b74c
  points 543ca2fd8da3649f6c92330b6fba09ee
  position 3faa007b96c22ab02db2525a774d6349
  render e6d0b09761b5e2880f9b35ec05ca6fc2
  reset 96a0b18278c442fd1df67072738fd376
  step 0be7b05685322b0d0a94732e8b9584d2
94f038cb77274e6505de4b66b61ff4ee
  $fShowWorld :: GHC.Show.Show World.World
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ World.World
                  World.$fShowWorld_$cshowsPrec
                  World.$fShowWorld_$cshow
                  World.$fShowWorld_$cshowList -}
94f038cb77274e6505de4b66b61ff4ee
  $fShowWorld1 :: World.World -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U,U(U(U),U(U)),U(U(U(U),U(U)),U(U(U),U(U))),1*U(U))>,
     Unfolding: (\ (w :: World.World) ->
                 case w of ww { World.World ww1 ww2 ww3 ww4 ww5 ->
                 World.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 }) -}
214e1b996319fea2c81c7d81ab78e0be
  $fShowWorld2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
94f038cb77274e6505de4b66b61ff4ee
  $fShowWorld_$cshow :: World.World -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U,U(U(U),U(U)),U(U(U(U),U(U)),U(U(U),U(U))),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: World.World) ->
                 World.$fShowWorld_$cshowsPrec
                   World.$fShowWorld2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94f038cb77274e6505de4b66b61ff4ee
  $fShowWorld_$cshowList :: [World.World] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ World.World
                   World.$fShowWorld1) -}
94f038cb77274e6505de4b66b61ff4ee
  $fShowWorld_$cshowsPrec ::
    GHC.Types.Int -> World.World -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U,U(U(U),U(U)),U(U(U(U),U(U)),U(U(U),U(U))),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: World.World) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { World.World ww3 ww4 ww5 ww6 ww7 ->
                 World.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
4b7142e6f0685b6964aac3c4c279df9e
  $tc'World :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5267786241235177346##
                   430609858924454558##
                   World.$trModule
                   World.$tc'World2
                   0#
                   World.$tc'World1) -}
e46b480f7a88b1a0d0002bf362c22978
  $tc'World1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
baf15e1206eca6b5a3266d15236279ab
  $tc'World2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS World.$tc'World3) -}
ad5fc7c47a26b82d81f5dfbfd2408617
  $tc'World3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'World"#) -}
39257df4d000192e93109afbd7657c72
  $tcWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11820512236966870635##
                   12845496323702629516##
                   World.$trModule
                   World.$trModule1
                   0#
                   GHC.Types.krep$*) -}
510cab210269dc3ceeb0349c5c85d7c3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module World.$trModule3 World.$trModule1) -}
e8c95eedb8b53fc54119d6436e6c8a00
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS World.$trModule2) -}
94a920ea0176ad60ff9c0f1f5b7cd17e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("World"#) -}
b74032b9dd34ddf5df538fe237fc25a3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS World.$trModule4) -}
03ab892ca0920cb8c0f40f265f9ff274
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f7fae82906584692e73eff1b35ba066f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Player.Player
    -> [Block.Block]
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Block.Block
    -> GHC.Types.Float
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><L,U><L,U(U(U),U(U))><L,U(U(U(U),U(U)),U(U(U),U(U)))><L,1*U(U)>,
     Inline: [0] -}
8dc556bf4aa22f8f5cd76fe07348f0ad
  $wrender ::
    World.World
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 1,
     Strictness: <L,U(1*U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U,A,1*U(1*U(U,U),1*U(U,U)),A)>,
     Inline: [0],
     Unfolding: (\ (w :: World.World) ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (case Player.$wrender
                              (case w of wild { World.World x1 x2 x3 x4 x5 ->
                               x1 }) of ww { Unit# ww1 ->
                       Graphics.Gloss.Internals.Data.Picture.Pictures ww1 })
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (Graphics.Gloss.Internals.Data.Picture.Pictures
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (case w of wild { World.World x1 x2 x3 x4 x5 ->
                                World.render_go x2 })
                               (GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  (Graphics.Gloss.Internals.Data.Picture.Color
                                     World.render1
                                     (Graphics.Gloss.Internals.Data.Picture.Polygon
                                        (case w of wild { World.World x1 x2 x3 x4 x5 ->
                                         Block.points x4 })))
                                  (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture))))
                         (GHC.Types.[]
                            @ Graphics.Gloss.Internals.Data.Picture.Picture)) #)) -}
859689d24f727863969ec7f72f5be64d
  $wstep ::
    GHC.Types.Float -> World.World -> (# GHC.Types.Bool, World.World #)
  {- Arity: 2,
     Strictness: <L,U(U)><L,1*U(1*U(1*U(1*U(U),1*U(U)),1*U(U(U),U(U)),U(U(U),U(U))),U,U,U,U(U))>,
     Inline: [0] -}
94f038cb77274e6505de4b66b61ff4ee
  data World
    = World {_player :: Player.Player,
             _blocks :: [Block.Block],
             _start :: Graphics.Gloss.Internals.Data.Picture.Point,
             _finish :: Block.Block,
             _time :: GHC.Types.Float}
94f038cb77274e6505de4b66b61ff4ee
  _blocks :: World.World -> [Block.Block]
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 ds3 ds4 ds5 -> ds2 }) -}
94f038cb77274e6505de4b66b61ff4ee
  _finish :: World.World -> Block.Block
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 ds3 ds4 ds5 -> ds4 }) -}
94f038cb77274e6505de4b66b61ff4ee
  _player :: World.World -> Player.Player
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 ds3 ds4 ds5 -> ds1 }) -}
94f038cb77274e6505de4b66b61ff4ee
  _start ::
    World.World -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 ds3 ds4 ds5 -> ds3 }) -}
94f038cb77274e6505de4b66b61ff4ee
  _time :: World.World -> GHC.Types.Float
  RecSel Left World.World
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: World.World) ->
                 case ds of wild { World.World ds1 ds2 ds3 ds4 ds5 -> ds5 }) -}
ba8fa3f184101bc7773daa5671bedfa0
  blocks :: Control.Lens.Type.Lens' World.World [Block.Block]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f2 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f2)
                   (f3 :: [Block.Block] -> f2 [Block.Block])
                   (ds :: World.World) ->
                 case ds of wild { World.World x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f2
                   $dFunctor
                   @ [Block.Block]
                   @ World.World
                   (\ (y1 :: [Block.Block]) -> World.World x1 y1 x3 x4 x5)
                   (f3 x2) }) -}
8a4881c465671cfc437ff93e44dcd981
  create :: Level.Level -> World.World
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (l :: Level.Level) ->
                 World.World
                   (Player.Player
                      (case l of wild { Level.Level x1 x2 x3 -> x1 })
                      Player.create4
                      Player.create1)
                   (case l of wild { Level.Level x1 x2 x3 -> x3 })
                   (case l of wild { Level.Level x1 x2 x3 -> x1 })
                   (case l of wild { Level.Level x1 x2 x3 -> x2 })
                   World.create1) -}
55c89c3382fa3f9c8de51fc49612e204
  create1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
41c10e8c7962a7c17a6b299d3c41b110
  handle ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> World.World -> World.World
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U(U(U,U,U),U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w1 :: World.World) ->
                 case w1 of ww { World.World ww1 ww2 ww3 ww4 ww5 ->
                 case w of wild {
                   DEFAULT
                   -> World.World
                        (case ww1 of ww6 { Player.Player ww7 ww8 ww9 ->
                         case wild of wild1 {
                           Graphics.Gloss.Internals.Interface.Event.EventMotion ds
                           -> case ds of wild2 { (,) x y ->
                              Player.Player
                                ww7
                                ww8
                                (case x of ww10 { GHC.Types.F# ww11 ->
                                 case y of ww12 { GHC.Types.F# ww13 ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.eqFloat#
                                           (GHC.Prim.sqrtFloat#
                                              (GHC.Prim.plusFloat#
                                                 (GHC.Prim.powerFloat# ww11 2.0#)
                                                 (GHC.Prim.powerFloat# ww13 2.0#)))
                                           0.0#) of wild3 {
                                   GHC.Types.False
                                   -> let {
                                        m :: GHC.Types.Float
                                        = case GHC.Prim.divideFloat#
                                                 1.0#
                                                 (GHC.Prim.sqrtFloat#
                                                    (GHC.Prim.plusFloat#
                                                       (GHC.Prim.powerFloat# ww11 2.0#)
                                                       (GHC.Prim.powerFloat#
                                                          ww13
                                                          2.0#))) of wild4 { DEFAULT ->
                                          GHC.Types.F# wild4 }
                                      } in
                                      (case m of wild4 { GHC.Types.F# x1 ->
                                       GHC.Types.F# (GHC.Prim.timesFloat# x1 ww11) },
                                       case m of wild4 { GHC.Types.F# x1 ->
                                       GHC.Types.F# (GHC.Prim.timesFloat# x1 ww13) })
                                   GHC.Types.True -> (Base.unit1, Base.unit1) } } }) }
                           Graphics.Gloss.Internals.Interface.Event.EventResize ipv
                           -> Player.Player ww7 ww8 ww9 } })
                        ww2
                        ww3
                        ww4
                        ww5
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        DEFAULT -> World.World ww1 ww2 ww3 ww4 ww5
                        Graphics.Gloss.Internals.Interface.Backend.Types.Char ds4
                        -> case ds4 of wild2 { GHC.Types.C# ds5 ->
                           case ds5 of ds6 {
                             DEFAULT -> World.World ww1 ww2 ww3 ww4 ww5
                             'r'#
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> World.World
                                       (case ww1 of wild4 { Player.Player x1 x2 x3 ->
                                        Player.Player ww3 Player.create4 x3 })
                                       ww2
                                       ww3
                                       ww4
                                       ww5
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> World.World ww1 ww2 ww3 ww4 ww5 } } } } } }) -}
8927dfe34e9c38c681179971f312326c
  player :: Control.Lens.Type.Lens' World.World Player.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f2 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f2)
                   (f3 :: Player.Player -> f2 Player.Player)
                   (ds :: World.World) ->
                 case ds of wild { World.World x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f2
                   $dFunctor
                   @ Player.Player
                   @ World.World
                   (\ (y1 :: Player.Player) -> World.World y1 x2 x3 x4 x5)
                   (f3 x1) }) -}
152bb5c45ea0bf54fc1fc9471b2e9419
  render ::
    World.World -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <L,U(U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U,A,U(U(U,U),U(U,U)),A)>m14,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: World.World) ->
                 case World.$wrender w of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
ee8723cd914b8a388f83b77497c68ab1
  render1 :: Graphics.Gloss.Internals.Data.Color.Color
  {- Unfolding: (case Graphics.Gloss.Internals.Data.Color.$wclampColor
                        0.0#
                        1.0#
                        0.0#
                        1.0# of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Graphics.Gloss.Internals.Data.Color.RGBA ww6 ww7 ww8 ww9 }) -}
bcf42aeaf7419b38c8b20891207fe3d6
  render_go ::
    [Block.Block] -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
abfd96e4472527ffdfd79df97f07b0e9
  step ::
    GHC.Types.Float -> World.World -> (GHC.Types.Bool, World.World)
  {- Arity: 2,
     Strictness: <L,U(U)><L,1*U(1*U(1*U(1*U(U),1*U(U)),1*U(U(U),U(U)),U(U(U),U(U))),U,U,U,U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: World.World) ->
                 case World.$wstep w w1 of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
9a584466a26a73dd31b86ae067013813
  time :: Control.Lens.Type.Lens' World.World GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f2 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f2)
                   (f3 :: GHC.Types.Float -> f2 GHC.Types.Float)
                   (ds :: World.World) ->
                 case ds of wild { World.World x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f2
                   $dFunctor
                   @ GHC.Types.Float
                   @ World.World
                   (\ (y1 :: GHC.Types.Float) -> World.World x1 x2 x3 x4 y1)
                   (f3 x5) }) -}
instance GHC.Show.Show [World.World] = World.$fShowWorld
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

