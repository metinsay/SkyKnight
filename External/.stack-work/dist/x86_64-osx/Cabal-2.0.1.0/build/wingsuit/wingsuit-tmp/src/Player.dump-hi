
==================== FINAL INTERFACE ====================
2018-04-21 17:17:24.856072 UTC

interface main:Player 8022
  interface hash: 54c8f5c562831f1fbab11acd2f3cb839
  ABI hash: 3e6739225a30abf4aea9ecfc2d972f9b
  export-list hash: dc270cca6c68bb502908d6ea2c2a66fb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d7c563f0c2081cbfc8a99503f5883d3b
  sig of: Nothing
  used TH splices: True
  where
exports:
  Player.acceleration
  Player.create
  Player.handle
  Player.points
  Player.position
  Player.render
  Player.reset
  Player.step
  Player.velocity
  Player.Player
module dependencies: Base
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.13
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 adjunctions-4.4 array-0.5.2.0 base-4.10.1.0
                      base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1 bmp-1.2.6.3
                      bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.3
                      containers-0.5.10.2 contravariant-1.4.1 deepseq-1.4.3.0
                      distributive-0.5.3 exceptions-0.8.3 fixed-0.2.1.1 free-5.0.1
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 hashable-1.2.7.0
                      integer-gmp-1.0.1.0 kan-extensions-5.1 lens-4.16.1 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.3
                      semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 th-abstraction-0.2.6.0
                      transformers-0.5.2.0 transformers-base-0.4.4
                      transformers-compat-0.5.1.4 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         base-orphans-0.7:Data.Orphans
         transformers-0.5.2.0:Control.Monad.Trans.Error
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Function e8e43d925cd2e5608dfc5d809f4ae5e4
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture 094569b26fc286aa3a5e9a7de50bb734
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event a404c1b25d7ac94aba4f70372db09d2e
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Color b996ae71d8859d230763c9d9f29aeedf
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture 4cfdf48333d4da0b95ccc85f821990f9
import  -/  lens-4.16.1:Control.Lens.Getter c35decfdb371768220da83f721a88717
import  -/  lens-4.16.1:Control.Lens.Setter 226990dac6ea3001e18d1279780ff75e
import  -/  lens-4.16.1:Control.Lens.TH 27283fec2c9c197888588e6fd8cbf26e
import  -/  lens-4.16.1:Control.Lens.Type aa7a812db6d306498bb9b92023fe6f42
import  -/  Base 11cb7d834f2f99b375feed45c987dbb0
  exports: 0ae00316f74b1d214781093a67933a66
  .* 073189d7d9ef23ca7fd63d8132339782
  mag 161c1c731dd36f3ad18280468005e943
  unit 2f2ba4c4234cb81c13948d587c385b7c
4bef3427f6f3ab786fec0b1fa8976fa1
  $fShowPlayer :: GHC.Show.Show Player.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Player.Player
                  Player.$fShowPlayer_$cshowsPrec
                  Player.$fShowPlayer_$cshow
                  Player.$fShowPlayer_$cshowList -}
4bef3427f6f3ab786fec0b1fa8976fa1
  $fShowPlayer1 :: Player.Player -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Unfolding: (\ (w :: Player.Player) (w1 :: GHC.Base.String) ->
                 case w of ww { Player.Player ww1 ww2 ww3 ->
                 Player.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
f583f501c30c106fbcbc5bed14541518
  $fShowPlayer2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  $fShowPlayer_$cshow :: Player.Player -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Player.Player) ->
                 Player.$fShowPlayer_$cshowsPrec
                   Player.$fShowPlayer2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  $fShowPlayer_$cshowList :: [Player.Player] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Player.Player
                   Player.$fShowPlayer1) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Player.Player -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Player.Player)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Player.Player ww3 ww4 ww5 ->
                 Player.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
bfd34d8503e57816dc152964e803c05e
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1308407288715018511##
                   4084347224458407053##
                   Player.$trModule
                   Player.$tc'Player2
                   0#
                   Player.$tc'Player1) -}
065b017a47cd28477148006db4d7ee0f
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9b20dae827e73f43ca2545690950d833
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Player.$tc'Player3) -}
e9c4cbadce9710a0ad7d50c7b9bd716f
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
90f0e75164ded58524e8e8b7409e26be
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9380159511514820757##
                   1338526320940489327##
                   Player.$trModule
                   Player.$trModule1
                   0#
                   GHC.Types.krep$*) -}
0fb141fdf9277b991dc512da35c652cb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Player.$trModule3
                   Player.$trModule1) -}
488030e1be962ebd424d4b144963edab
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Player.$trModule2) -}
aa6804c31d886bfd847635a51267a025
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
96f5ed481a401e922695deadc1aa208f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Player.$trModule4) -}
cdda4786171962a378bb9c8e7a81feef
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
07cc730e5d523e1701cb49baad3e5e4f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0] -}
ff3b4af2c3147dddf49851598ed34a22
  $wacceleration ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><S,U><S,U>, Inline: [0] -}
258d12f11e00f193e5dada4ae7fdb656
  $wpoints ::
    Player.Player
    -> (# Graphics.Gloss.Internals.Data.Picture.Point,
          [Graphics.Gloss.Internals.Data.Picture.Point] #)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(1*U(U),1*U(U)),A,U(1*U(U),1*U(U)))>,
     Inline: [0],
     Unfolding: (\ (w :: Player.Player) ->
                 let {
                   dx :: GHC.Types.Float
                   = case w of wild { Player.Player x1 x2 x3 ->
                     case x3 of wild1 { (,) dx1 dy -> dx1 } }
                 } in
                 let {
                   dy :: GHC.Types.Float
                   = case w of wild { Player.Player x1 x2 x3 ->
                     case x3 of wild1 { (,) dx1 dy1 -> dy1 } }
                 } in
                 let {
                   x :: GHC.Types.Float
                   = case w of wild { Player.Player x1 x2 x3 ->
                     case x1 of wild1 { (,) x4 y -> x4 } }
                 } in
                 let {
                   y :: GHC.Types.Float
                   = case w of wild { Player.Player x1 x2 x3 ->
                     case x1 of wild1 { (,) x4 y1 -> y1 } }
                 } in
                 (# (case x of wild2 { GHC.Types.F# x1 ->
                     case dx of wild3 { GHC.Types.F# y1 ->
                     case dy of wild1 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.minusFloat#
                          (GHC.Prim.plusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                          (GHC.Prim.timesFloat# 5.0# y2)) } } },
                     case y of wild2 { GHC.Types.F# x1 ->
                     case dy of wild3 { GHC.Types.F# y1 ->
                     case dx of wild1 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.plusFloat#
                          (GHC.Prim.plusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                          (GHC.Prim.timesFloat# 5.0# y2)) } } }),
                    GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Point
                      (case x of wild2 { GHC.Types.F# x1 ->
                       case dx of wild3 { GHC.Types.F# y1 ->
                       case dy of wild1 { GHC.Types.F# y2 ->
                       GHC.Types.F#
                         (GHC.Prim.plusFloat#
                            (GHC.Prim.plusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                            (GHC.Prim.timesFloat# 5.0# y2)) } } },
                       case y of wild2 { GHC.Types.F# x1 ->
                       case dy of wild3 { GHC.Types.F# y1 ->
                       case dx of wild1 { GHC.Types.F# y2 ->
                       GHC.Types.F#
                         (GHC.Prim.minusFloat#
                            (GHC.Prim.plusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                            (GHC.Prim.timesFloat# 5.0# y2)) } } })
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (case x of wild2 { GHC.Types.F# x1 ->
                          case dx of wild3 { GHC.Types.F# y1 ->
                          case dy of wild1 { GHC.Types.F# y2 ->
                          GHC.Types.F#
                            (GHC.Prim.plusFloat#
                               (GHC.Prim.minusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                               (GHC.Prim.timesFloat# 5.0# y2)) } } },
                          case y of wild2 { GHC.Types.F# x1 ->
                          case dy of wild3 { GHC.Types.F# y1 ->
                          case dx of wild1 { GHC.Types.F# y2 ->
                          GHC.Types.F#
                            (GHC.Prim.minusFloat#
                               (GHC.Prim.minusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                               (GHC.Prim.timesFloat# 5.0# y2)) } } })
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (case x of wild2 { GHC.Types.F# x1 ->
                             case dx of wild3 { GHC.Types.F# y1 ->
                             case dy of wild1 { GHC.Types.F# y2 ->
                             GHC.Types.F#
                               (GHC.Prim.minusFloat#
                                  (GHC.Prim.minusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                                  (GHC.Prim.timesFloat# 5.0# y2)) } } },
                             case y of wild2 { GHC.Types.F# x1 ->
                             case dy of wild3 { GHC.Types.F# y1 ->
                             case dx of wild1 { GHC.Types.F# y2 ->
                             GHC.Types.F#
                               (GHC.Prim.plusFloat#
                                  (GHC.Prim.minusFloat# x1 (GHC.Prim.timesFloat# 20.0# y1))
                                  (GHC.Prim.timesFloat# 5.0# y2)) } } })
                            (GHC.Types.[]
                               @ Graphics.Gloss.Internals.Data.Picture.Point))) #)) -}
8056266e6e2865d590d5df87245980e0
  $wrender ::
    Player.Player
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 1,
     Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))>,
     Inline: [0],
     Unfolding: (\ (w :: Player.Player) ->
                 (# GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Picture
                      (Graphics.Gloss.Internals.Data.Picture.Polygon (Player.points w))
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (Graphics.Gloss.Internals.Data.Picture.Pictures
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (Graphics.Gloss.Internals.Data.Picture.Color
                                  Player.render2
                                  (Graphics.Gloss.Internals.Data.Picture.Line
                                     (GHC.Types.:
                                        @ Graphics.Gloss.Internals.Data.Picture.Point
                                        (case w of wild { Player.Player x1 x2 x3 -> x1 })
                                        (GHC.Types.:
                                           @ Graphics.Gloss.Internals.Data.Picture.Point
                                           (case w of wild { Player.Player x1 x2 x3 ->
                                            case x1 of wild1 { (,) x4 y1 ->
                                            case x2 of wild2 { (,) x y ->
                                            (case x4 of wild3 { GHC.Types.F# x5 ->
                                             case x of wild4 { GHC.Types.F# y2 ->
                                             GHC.Types.F#
                                               (GHC.Prim.plusFloat#
                                                  x5
                                                  (GHC.Prim.timesFloat# 0.2# y2)) } },
                                             case y1 of wild3 { GHC.Types.F# x5 ->
                                             case y of wild4 { GHC.Types.F# y2 ->
                                             GHC.Types.F#
                                               (GHC.Prim.plusFloat#
                                                  x5
                                                  (GHC.Prim.timesFloat# 0.2# y2)) } }) } } })
                                           (GHC.Types.[]
                                              @ Graphics.Gloss.Internals.Data.Picture.Point)))))
                               (GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  (Graphics.Gloss.Internals.Data.Picture.Color
                                     Player.render1
                                     (Graphics.Gloss.Internals.Data.Picture.Line
                                        (GHC.Types.:
                                           @ Graphics.Gloss.Internals.Data.Picture.Point
                                           (case w of wild { Player.Player x1 x2 x3 -> x1 })
                                           (GHC.Types.:
                                              @ Graphics.Gloss.Internals.Data.Picture.Point
                                              (case w of wild { Player.Player x1 x2 x3 ->
                                               case x1 of wild1 { (,) x4 y1 ->
                                               case x2 of ww { (,) ww1 ww2 ->
                                               case x3 of ww3 { (,) ww4 ww5 ->
                                               case ww4 of ww6 { GHC.Types.F# ww7 ->
                                               case ww5 of ww8 { GHC.Types.F# ww9 ->
                                               case Player.$wacceleration
                                                      ww1
                                                      ww2
                                                      ww7
                                                      ww9 of ww10 { (#,#) ww11 ww12 ->
                                               (case x4 of wild2 { GHC.Types.F# x ->
                                                case ww11 of wild3 { GHC.Types.F# y ->
                                                GHC.Types.F#
                                                  (GHC.Prim.plusFloat#
                                                     x
                                                     (GHC.Prim.timesFloat# 0.2# y)) } },
                                                case y1 of wild2 { GHC.Types.F# x ->
                                                case ww12 of wild3 { GHC.Types.F# y ->
                                                GHC.Types.F#
                                                  (GHC.Prim.plusFloat#
                                                     x
                                                     (GHC.Prim.timesFloat#
                                                        0.2#
                                                        y)) } }) } } } } } } })
                                              (GHC.Types.[]
                                                 @ Graphics.Gloss.Internals.Data.Picture.Point)))))
                                  (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture))))
                         (GHC.Types.[]
                            @ Graphics.Gloss.Internals.Data.Picture.Picture)) #)) -}
a6b8632c906ca727fb4c0c2818c56ec7
  $wstep ::
    GHC.Types.Float
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> (# Graphics.Gloss.Internals.Data.Picture.Point,
          Graphics.Gloss.Internals.Data.Picture.Point,
          Graphics.Gloss.Internals.Data.Picture.Point #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U(U),U(U))><L,U(U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (ww :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (ww1 :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (ww2 :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 let {
                   x2 :: Graphics.Gloss.Internals.Data.Picture.Point
                   = case ww1 of wild { (,) x1 y1 ->
                     case ww2 of ww3 { (,) ww4 ww5 ->
                     case ww4 of ww6 { GHC.Types.F# ww7 ->
                     case ww5 of ww8 { GHC.Types.F# ww9 ->
                     case Player.$wacceleration
                            x1
                            y1
                            ww7
                            ww9 of ww10 { (#,#) ww11 ww12 ->
                     (case x1 of wild2 { GHC.Types.F# x ->
                      case w of wild1 { GHC.Types.F# x4 ->
                      case ww11 of wild3 { GHC.Types.F# y ->
                      GHC.Types.F#
                        (GHC.Prim.plusFloat# x (GHC.Prim.timesFloat# x4 y)) } } },
                      case y1 of wild2 { GHC.Types.F# x ->
                      case w of wild1 { GHC.Types.F# x4 ->
                      case ww12 of wild3 { GHC.Types.F# y ->
                      GHC.Types.F#
                        (GHC.Prim.plusFloat#
                           x
                           (GHC.Prim.timesFloat# x4 y)) } } }) } } } } }
                 } in
                 (# case ww of wild { (,) x1 y1 ->
                    case x2 of wild1 { (,) x y ->
                    (case x1 of wild2 { GHC.Types.F# x4 ->
                     case w of wild3 { GHC.Types.F# x5 ->
                     case x of wild4 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.plusFloat# x4 (GHC.Prim.timesFloat# x5 y2)) } } },
                     case y1 of wild2 { GHC.Types.F# x4 ->
                     case w of wild3 { GHC.Types.F# x5 ->
                     case y of wild4 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.plusFloat# x4 (GHC.Prim.timesFloat# x5 y2)) } } }) } },
                    x2, ww2 #)) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  data Player
    = Player {_position :: Graphics.Gloss.Internals.Data.Picture.Point,
              _velocity :: Graphics.Gloss.Internals.Data.Picture.Point,
              _rotation :: Graphics.Gloss.Internals.Data.Picture.Point}
4bef3427f6f3ab786fec0b1fa8976fa1
  _position ::
    Player.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Player.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Player.Player) ->
                 case ds of wild { Player.Player ds1 ds2 ds3 -> ds1 }) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  _rotation ::
    Player.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Player.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Player.Player) ->
                 case ds of wild { Player.Player ds1 ds2 ds3 -> ds3 }) -}
4bef3427f6f3ab786fec0b1fa8976fa1
  _velocity ::
    Player.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Player.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Player.Player) ->
                 case ds of wild { Player.Player ds1 ds2 ds3 -> ds2 }) -}
9f0a135164723af52fe2818529a3e0a6
  acceleration ::
    Player.Player -> Graphics.Gloss.Internals.Data.Picture.Point
  {- Arity: 1,
     Strictness: <S(LSS(S(S)S(S))),1*U(A,1*U(U(U),U(U)),1*U(1*U(U),1*U(U)))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Player.Player) ->
                 case w of ww { Player.Player ww1 ww2 ww3 ->
                 case ww2 of ww4 { (,) ww5 ww6 ->
                 case ww3 of ww7 { (,) ww8 ww9 ->
                 case ww8 of ww10 { GHC.Types.F# ww11 ->
                 case ww9 of ww12 { GHC.Types.F# ww13 ->
                 case Player.$wacceleration
                        ww5
                        ww6
                        ww11
                        ww13 of ww14 { (#,#) ww15 ww16 ->
                 (ww15, ww16) } } } } } }) -}
a829df345e1cdbadab9b09ff92c8f5cc
  create ::
    Graphics.Gloss.Internals.Data.Picture.Point -> Player.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (pos :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                 Player.Player pos Player.create4 Player.create1) -}
3a034b3c55bb7b251b02c9b1d1bcd21e
  create1 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Player.create3, Player.create2)) -}
bce6d5b9cd96149774a740c97951fc91
  create2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
2fe836667aaf608547367773d0a8cef6
  create3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
14983554a2163565f39471eb00765abf
  create4 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Player.create2, Player.create2)) -}
034b58d687bc080d479dd2a9f819b74c
  handle ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Player.Player -> Player.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (w1 :: Player.Player) ->
                 case w1 of ww { Player.Player ww1 ww2 ww3 ->
                 case w of wild {
                   DEFAULT -> Player.Player ww1 ww2 ww3
                   Graphics.Gloss.Internals.Interface.Event.EventMotion ds
                   -> case ds of wild1 { (,) x y ->
                      Player.Player
                        ww1
                        ww2
                        (case x of ww4 { GHC.Types.F# ww5 ->
                         case y of ww6 { GHC.Types.F# ww7 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqFloat#
                                   (GHC.Prim.sqrtFloat#
                                      (GHC.Prim.plusFloat#
                                         (GHC.Prim.powerFloat# ww5 2.0#)
                                         (GHC.Prim.powerFloat# ww7 2.0#)))
                                   0.0#) of wild2 {
                           GHC.Types.False
                           -> let {
                                m :: GHC.Types.Float
                                = case GHC.Prim.divideFloat#
                                         1.0#
                                         (GHC.Prim.sqrtFloat#
                                            (GHC.Prim.plusFloat#
                                               (GHC.Prim.powerFloat# ww5 2.0#)
                                               (GHC.Prim.powerFloat#
                                                  ww7
                                                  2.0#))) of wild4 { DEFAULT ->
                                  GHC.Types.F# wild4 }
                              } in
                              (case m of wild3 { GHC.Types.F# x1 ->
                               GHC.Types.F# (GHC.Prim.timesFloat# x1 ww5) },
                               case m of wild3 { GHC.Types.F# x1 ->
                               GHC.Types.F# (GHC.Prim.timesFloat# x1 ww7) })
                           GHC.Types.True -> (Base.unit1, Base.unit1) } } }) } } }) -}
543ca2fd8da3649f6c92330b6fba09ee
  points ::
    Player.Player -> [Graphics.Gloss.Internals.Data.Picture.Point]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(U(U),U(U)),A,U(U(U),U(U)))>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Player.Player) ->
                 case Player.$wpoints w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   ww1
                   ww2 }) -}
3faa007b96c22ab02db2525a774d6349
  position ::
    Control.Lens.Type.Lens'
      Player.Player Graphics.Gloss.Internals.Data.Picture.Point
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Graphics.Gloss.Internals.Data.Picture.Point
                          -> f Graphics.Gloss.Internals.Data.Picture.Point)
                   (ds :: Player.Player) ->
                 case ds of wild { Player.Player x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   @ Player.Player
                   (\ (y1 :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                    Player.Player y1 x2 x3)
                   (f1 x1) }) -}
e6d0b09761b5e2880f9b35ec05ca6fc2
  render ::
    Player.Player -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))>m14,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Player.Player) ->
                 case Player.$wrender w of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
80e9aead3d545e4d24613f97f64c69f3
  render1 :: Graphics.Gloss.Internals.Data.Color.Color
  {- Unfolding: (case Graphics.Gloss.Internals.Data.Color.$wclampColor
                        1.0#
                        0.0#
                        0.0#
                        1.0# of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Graphics.Gloss.Internals.Data.Color.RGBA ww6 ww7 ww8 ww9 }) -}
35423208eaea301319422fa9d0bb71c2
  render2 :: Graphics.Gloss.Internals.Data.Color.Color
  {- Unfolding: (case Graphics.Gloss.Internals.Data.Color.$wclampColor
                        0.0#
                        0.0#
                        1.0#
                        1.0# of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Graphics.Gloss.Internals.Data.Color.RGBA ww6 ww7 ww8 ww9 }) -}
96a0b18278c442fd1df67072738fd376
  reset ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Player.Player -> Player.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,A,U)>m,
     Unfolding: InlineRule (0, True, True)
                Player.reset1
                  `cast`
                (<Graphics.Gloss.Internals.Data.Picture.Point>_R
                 ->_R <Player.Player>_R
                 ->_R Data.Functor.Identity.N:Identity[0] <Player.Player>_R) -}
b142e2631c742f5e568c7fde9abb9678
  reset1 ::
    Graphics.Gloss.Internals.Data.Picture.Point
    -> Player.Player -> Data.Functor.Identity.Identity Player.Player
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (pos :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (p :: Player.Player) ->
                 case p of wild { Player.Player x1 x2 x3 ->
                 (Player.Player pos Player.create4 x3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0] <Player.Player>_R)) }) -}
0be7b05685322b0d0a94732e8b9584d2
  step :: GHC.Types.Float -> Player.Player -> Player.Player
  {- Arity: 2,
     Strictness: <L,U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(U(U),U(U)),U(U(U),U(U)))>m,
     Unfolding: InlineRule (0, True, True)
                Player.step1
                  `cast`
                (<GHC.Types.Float>_R
                 ->_R <Player.Player>_R
                 ->_R Data.Functor.Identity.N:Identity[0] <Player.Player>_R) -}
154a0db51e2406273ca1e543a144d9a7
  step1 ::
    GHC.Types.Float
    -> Player.Player -> Data.Functor.Identity.Identity Player.Player
  {- Arity: 2,
     Strictness: <L,U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(U(U),U(U)),U(U(U),U(U)))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Player.Player) ->
                 case w1 of ww { Player.Player ww1 ww2 ww3 ->
                 case Player.$wstep w ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (Player.Player ww5 ww6 ww7)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Player.Player>_R)) } }) -}
9f8ed8789bce84b8b32f20bf709da308
  velocity ::
    Control.Lens.Type.Lens'
      Player.Player Graphics.Gloss.Internals.Data.Picture.Point
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Graphics.Gloss.Internals.Data.Picture.Point
                          -> f Graphics.Gloss.Internals.Data.Picture.Point)
                   (ds :: Player.Player) ->
                 case ds of wild { Player.Player x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   @ Player.Player
                   (\ (y1 :: Graphics.Gloss.Internals.Data.Picture.Point) ->
                    Player.Player x1 y1 x3)
                   (f1 x2) }) -}
instance GHC.Show.Show [Player.Player] = Player.$fShowPlayer
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

