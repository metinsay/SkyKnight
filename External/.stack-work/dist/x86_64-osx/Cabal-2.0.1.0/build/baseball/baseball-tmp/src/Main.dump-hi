
==================== FINAL INTERFACE ====================
2018-04-09 17:35:20.185607 UTC

interface main:Main 8022
  interface hash: 3287353f9f837079deb4901f764e9d7f
  ABI hash: e3c48677206a0264944ed2a68758e499
  export-list hash: 9f2b8008874312b4a72a0df7dab84d72
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 28a4840714917dbf0fc78724daaaf857
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.13
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 adjunctions-4.4 array-0.5.2.0 base-4.10.1.0
                      base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1 bmp-1.2.6.3
                      bytestring-0.10.8.2 call-stack-0.1.0 comonad-5.0.3
                      containers-0.5.10.2 contravariant-1.4.1 deepseq-1.4.3.0
                      distributive-0.5.3 exceptions-0.8.3 fixed-0.2.1.1 free-5.0.1
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 hashable-1.2.7.0
                      integer-gmp-1.0.1.0 kan-extensions-5.1 lens-4.16.1 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 reflection-2.1.3
                      semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 th-abstraction-0.2.6.0
                      transformers-0.5.2.0 transformers-base-0.4.4
                      transformers-compat-0.5.1.4 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         base-orphans-0.7:Data.Orphans
         transformers-0.5.2.0:Control.Monad.Trans.Error
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Data.Bool f6ec3e184083b7bd51c5922a7bdc5c9f
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Function e8e43d925cd2e5608dfc5d809f4ae5e4
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Display 04b36b6ca6df1a27c29b6e708db9a632
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture 094569b26fc286aa3a5e9a7de50bb734
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Pure.Game 9b9d397451418b8164d32d1bafb7d625
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event a404c1b25d7ac94aba4f70372db09d2e
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Color b996ae71d8859d230763c9d9f29aeedf
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture 4cfdf48333d4da0b95ccc85f821990f9
import  -/  lens-4.16.1:Control.Lens 831cfd91be9f91be92b4b4c041866812
import  -/  lens-4.16.1:Control.Lens.Getter c35decfdb371768220da83f721a88717
import  -/  lens-4.16.1:Control.Lens.Lens c2455725ac2df869115563051300e554
import  -/  lens-4.16.1:Control.Lens.Setter 226990dac6ea3001e18d1279780ff75e
import  -/  lens-4.16.1:Control.Lens.TH 27283fec2c9c197888588e6fd8cbf26e
import  -/  lens-4.16.1:Control.Lens.Tuple 72b9da669eb909f10b6391410cf2f79b
import  -/  lens-4.16.1:Control.Lens.Type aa7a812db6d306498bb9b92023fe6f42
fixities infixl 7 .*
99dffa57716f645b34dc5001adb8ccd7
  $fShowState :: GHC.Show.Show Main.State
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.State
                  Main.$fShowState_$cshowsPrec
                  Main.$fShowState_$cshow
                  Main.$fShowState_$cshowList -}
99dffa57716f645b34dc5001adb8ccd7
  $fShowState1 :: Main.State -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U)><L,U>,
     Unfolding: (\ (w :: Main.State) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.State ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 w1 }) -}
f585352464c6a78541a3cb5997767c66
  $fShowState2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
99dffa57716f645b34dc5001adb8ccd7
  $fShowState_$cshow :: Main.State -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: Main.State) ->
                 Main.$fShowState_$cshowsPrec
                   Main.$fShowState2
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
99dffa57716f645b34dc5001adb8ccd7
  $fShowState_$cshowList :: [Main.State] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.State Main.$fShowState1) -}
99dffa57716f645b34dc5001adb8ccd7
  $fShowState_$cshowsPrec ::
    GHC.Types.Int -> Main.State -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.State)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.State ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 w2 } }) -}
ef8655785663b46f83d5872c89596a07
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3226348116724185157##
                   8077630865780634187##
                   Main.$trModule
                   Main.$tc'State2
                   0#
                   Main.$tc'State1) -}
a1d74874e935ee223ae74f3c202127a0
  $tc'State1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
611831de219817cd84d32697e299a508
  $tc'State2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'State3) -}
fe8dd213eff73bf0042f481577877ab7
  $tc'State3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'State"#) -}
7f072f957f48d3baad5e66c8103f4d49
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11500382755588220783##
                   3741540518684525139##
                   Main.$trModule
                   Main.$tcState1
                   0#
                   GHC.Types.krep$*) -}
9307615cde52c9ff9b1200df379877b3
  $tcState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcState2) -}
9a49f729833c007fb22f15eaefa55eca
  $tcState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("State"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
d26d70e78d5fe20636d5edbfbeeac579
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> [(Graphics.Gloss.Internals.Data.Picture.Point,
         Graphics.Gloss.Internals.Data.Picture.Point)]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,1*U><L,U>,
     Inline: [0] -}
dfa22c2c2a1a25153556f5fcde503ec1
  $wplayerPoints ::
    Main.State
    -> (# Graphics.Gloss.Internals.Data.Picture.Point,
          [Graphics.Gloss.Internals.Data.Picture.Point] #)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(1*U(U),1*U(U)),A,U(1*U(U),1*U(U)),A)>,
     Inline: [0],
     Unfolding: (\ (w :: Main.State) ->
                 let {
                   dx :: GHC.Types.Float
                   = case w of wild { Main.State x2 x3 x4 x5 ->
                     case x4 of wild1 { (,) dx1 dy -> dx1 } }
                 } in
                 let {
                   dy :: GHC.Types.Float
                   = case w of wild { Main.State x2 x3 x4 x5 ->
                     case x4 of wild1 { (,) dx1 dy1 -> dy1 } }
                 } in
                 let {
                   x2 :: GHC.Types.Float
                   = case w of wild { Main.State x3 x4 x5 x6 ->
                     case x3 of wild1 { (,) x7 y -> x7 } }
                 } in
                 let {
                   y :: GHC.Types.Float
                   = case w of wild { Main.State x3 x4 x5 x6 ->
                     case x3 of wild1 { (,) x7 y1 -> y1 } }
                 } in
                 (# (case x2 of wild2 { GHC.Types.F# x3 ->
                     case dx of wild3 { GHC.Types.F# y1 ->
                     case dy of wild1 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.minusFloat#
                          (GHC.Prim.plusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                          (GHC.Prim.timesFloat# 5.0# y2)) } } },
                     case y of wild2 { GHC.Types.F# x3 ->
                     case dy of wild3 { GHC.Types.F# y1 ->
                     case dx of wild1 { GHC.Types.F# y2 ->
                     GHC.Types.F#
                       (GHC.Prim.plusFloat#
                          (GHC.Prim.plusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                          (GHC.Prim.timesFloat# 5.0# y2)) } } }),
                    GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Point
                      (case x2 of wild2 { GHC.Types.F# x3 ->
                       case dx of wild3 { GHC.Types.F# y1 ->
                       case dy of wild1 { GHC.Types.F# y2 ->
                       GHC.Types.F#
                         (GHC.Prim.plusFloat#
                            (GHC.Prim.plusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                            (GHC.Prim.timesFloat# 5.0# y2)) } } },
                       case y of wild2 { GHC.Types.F# x3 ->
                       case dy of wild3 { GHC.Types.F# y1 ->
                       case dx of wild1 { GHC.Types.F# y2 ->
                       GHC.Types.F#
                         (GHC.Prim.minusFloat#
                            (GHC.Prim.plusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                            (GHC.Prim.timesFloat# 5.0# y2)) } } })
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (case x2 of wild2 { GHC.Types.F# x3 ->
                          case dx of wild3 { GHC.Types.F# y1 ->
                          case dy of wild1 { GHC.Types.F# y2 ->
                          GHC.Types.F#
                            (GHC.Prim.plusFloat#
                               (GHC.Prim.minusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                               (GHC.Prim.timesFloat# 5.0# y2)) } } },
                          case y of wild2 { GHC.Types.F# x3 ->
                          case dy of wild3 { GHC.Types.F# y1 ->
                          case dx of wild1 { GHC.Types.F# y2 ->
                          GHC.Types.F#
                            (GHC.Prim.minusFloat#
                               (GHC.Prim.minusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                               (GHC.Prim.timesFloat# 5.0# y2)) } } })
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (case x2 of wild2 { GHC.Types.F# x3 ->
                             case dx of wild3 { GHC.Types.F# y1 ->
                             case dy of wild1 { GHC.Types.F# y2 ->
                             GHC.Types.F#
                               (GHC.Prim.minusFloat#
                                  (GHC.Prim.minusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                                  (GHC.Prim.timesFloat# 5.0# y2)) } } },
                             case y of wild2 { GHC.Types.F# x3 ->
                             case dy of wild3 { GHC.Types.F# y1 ->
                             case dx of wild1 { GHC.Types.F# y2 ->
                             GHC.Types.F#
                               (GHC.Prim.plusFloat#
                                  (GHC.Prim.minusFloat# x3 (GHC.Prim.timesFloat# 20.0# y1))
                                  (GHC.Prim.timesFloat# 5.0# y2)) } } })
                            (GHC.Types.[]
                               @ Graphics.Gloss.Internals.Data.Picture.Point))) #)) -}
99dffa57716f645b34dc5001adb8ccd7
  data State
    = State {_position :: Graphics.Gloss.Internals.Data.Picture.Point,
             _velocity :: Graphics.Gloss.Internals.Data.Picture.Point,
             _rotation :: Graphics.Gloss.Internals.Data.Picture.Point,
             _blocks :: [(Graphics.Gloss.Internals.Data.Picture.Point,
                          Graphics.Gloss.Internals.Data.Picture.Point)]}
99dffa57716f645b34dc5001adb8ccd7
  _blocks ::
    Main.State
    -> [(Graphics.Gloss.Internals.Data.Picture.Point,
         Graphics.Gloss.Internals.Data.Picture.Point)]
  RecSel Left Main.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.State) ->
                 case ds of wild { Main.State ds1 ds2 ds3 ds4 -> ds4 }) -}
99dffa57716f645b34dc5001adb8ccd7
  _position ::
    Main.State -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Main.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.State) ->
                 case ds of wild { Main.State ds1 ds2 ds3 ds4 -> ds1 }) -}
99dffa57716f645b34dc5001adb8ccd7
  _rotation ::
    Main.State -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Main.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.State) ->
                 case ds of wild { Main.State ds1 ds2 ds3 ds4 -> ds3 }) -}
99dffa57716f645b34dc5001adb8ccd7
  _velocity ::
    Main.State -> Graphics.Gloss.Internals.Data.Picture.Point
  RecSel Left Main.State
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.State) ->
                 case ds of wild { Main.State ds1 ds2 ds3 ds4 -> ds2 }) -}
2c2ddadb1940771b3cd79d1124140cd2
  initialPlayer :: Graphics.Gloss.Internals.Data.Picture.Point
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main14, Main.main22)) -}
aabb3f91101e35045470b7b8a894c147
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
200019fd58a13e24432f26e229a75c52
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Main.State
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Graphics.Gloss.Data.Display.FullScreen
                        Main.main24
                        Main.main23
                        Main.main8
                        Main.main6
                          `cast`
                        (<Main.State>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Main.main3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Main.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.State>_R))
                        Main.main2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Main.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.State>_R))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
8be13640874e74ddd9d1188a930904a3
  main10 ::
    [((GHC.Types.Float, GHC.Types.Float),
      (GHC.Types.Float, GHC.Types.Float))]
  {- Unfolding: (case GHC.Real.$wnumericEnumFromThen
                        @ GHC.Types.Float
                        GHC.Float.$fFractionalFloat
                        Main.main5
                        Main.main14 of ww { (#,#) ww1 ww2 ->
                 Main.main_$sgo2 Main.main11 ww1 ww2 }) -}
4704e886bdef97e7f48bee0d335a0a95
  main11 :: [GHC.Types.Float]
  {- Unfolding: (Main.main_go1
                   (GHC.Real.numericEnumFromTo
                      @ GHC.Types.Float
                      GHC.Classes.$fOrdFloat
                      GHC.Float.$fFractionalFloat
                      Main.main13
                      Main.main12)) -}
857778372d8d9d2710010eee5c08dd61
  main12 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 69.0#) -}
76fce598d8206bd2a1c71fbebfa1e020
  main13 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -100.0#) -}
2abe56ddc6be2febf8826613e4c272ff
  main14 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 50.0#) -}
a0130a0498c3621077f37baba80cf032
  main15 ::
    ((GHC.Types.Float, GHC.Types.Float),
     (GHC.Types.Float, GHC.Types.Float))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main18, Main.main16)) -}
81511164d8045d1cd2eba0a4399cdad0
  main16 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main5, Main.main17)) -}
5b6216d8341d4750fa2d4f306fca9a87
  main17 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 12000.0#) -}
000e3bd8a3b1086e23fa2fc54a15f007
  main18 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main19, Main.main19)) -}
456a1f6f8ff775779d230732d9411725
  main19 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -1000.0#) -}
80c4cecdbb64b88c5754002d351117a7
  main2 ::
    GHC.Types.Float
    -> Main.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.State #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,1*U(1*U(1*U(U),1*U(U)),1*U(U(U),U(U)),U(U(U),U(U)),U)><S,U> -}
1e4d272d04555d750bd4c52de51d66c4
  main20 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main21, Main.main5)) -}
216c81b90a1907874f61f567c272ef4f
  main21 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
f7fcebee55bd66d3f47c56df3520ee3e
  main22 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 10500.0#) -}
c9260ed9c4169135c814665b7e7582a3
  main23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 60#) -}
bd3162f073525bc32a8c53320a25110f
  main24 :: Graphics.Gloss.Internals.Data.Color.Color
  {- Unfolding: (case Graphics.Gloss.Internals.Data.Color.$wclampColor
                        1.0#
                        1.0#
                        1.0#
                        1.0# of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 Graphics.Gloss.Internals.Data.Color.RGBA ww6 ww7 ww8 ww9 }) -}
d5f11e0ef0d912e5f16e388600a4af55
  main25 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
53e72e7a822ad3d3cd98c3a5630d13b8
  main3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.State #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U,U)><S,U>,
     Unfolding: (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Main.State)[OneShot]
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s1,
                    case event of wild {
                      DEFAULT -> world1
                      Graphics.Gloss.Internals.Interface.Event.EventMotion ds
                      -> case ds of wild1 { (,) x2 y ->
                         case world1 of wild2 { Main.State x3 x4 x5 x6 ->
                         Main.State
                           x3
                           x4
                           (case x2 of ww { GHC.Types.F# ww1 ->
                            case y of ww2 { GHC.Types.F# ww3 ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.eqFloat#
                                      (GHC.Prim.sqrtFloat#
                                         (GHC.Prim.plusFloat#
                                            (GHC.Prim.powerFloat# ww1 2.0#)
                                            (GHC.Prim.powerFloat# ww3 2.0#)))
                                      0.0#) of wild3 {
                              GHC.Types.False
                              -> let {
                                   m :: GHC.Types.Float
                                   = case GHC.Prim.divideFloat#
                                            1.0#
                                            (GHC.Prim.sqrtFloat#
                                               (GHC.Prim.plusFloat#
                                                  (GHC.Prim.powerFloat# ww1 2.0#)
                                                  (GHC.Prim.powerFloat#
                                                     ww3
                                                     2.0#))) of wild4 { DEFAULT ->
                                     GHC.Types.F# wild4 }
                                 } in
                                 (case m of wild4 { GHC.Types.F# x7 ->
                                  GHC.Types.F# (GHC.Prim.timesFloat# x7 ww1) },
                                  case m of wild4 { GHC.Types.F# x7 ->
                                  GHC.Types.F# (GHC.Prim.timesFloat# x7 ww3) })
                              GHC.Types.True -> Main.main4 } } })
                           x6 } } } #)) -}
055c30706132db8b0c1a30aab96d937a
  main4 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.main5, Main.main5)) -}
08c5658fe84aa4d93c2e596ba1de55ee
  main5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
515b267f614208756cc3ee1a67d787ae
  main6 ::
    Main.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U(U),U(U)),A,U(U(U),U(U)),1*U)><S,U>,
     Unfolding: (\ (x2 :: Main.State)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s1,
                    Graphics.Gloss.Internals.Data.Picture.Translate
                      (case x2 of wild { Main.State x3 x4 x5 x6 ->
                       case x3 of wild1 { (,) a1 b2 ->
                       case a1 of wild2 { GHC.Types.F# x7 ->
                       GHC.Types.F# (GHC.Prim.negateFloat# x7) } } })
                      (case x2 of wild { Main.State x3 x4 x5 x6 ->
                       case x3 of wild1 { (,) a2 b1 ->
                       case b1 of wild2 { GHC.Types.F# x7 ->
                       GHC.Types.F# (GHC.Prim.negateFloat# x7) } } })
                      (Graphics.Gloss.Internals.Data.Picture.Pictures
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (Graphics.Gloss.Internals.Data.Picture.Polygon
                               (Main.playerPoints x2))
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Picture
                               (case x2 of wild { Main.State x3 x4 x5 x6 ->
                                Main.main_go
                                  (GHC.Base.map
                                     @ (Graphics.Gloss.Internals.Data.Picture.Point,
                                        Graphics.Gloss.Internals.Data.Picture.Point)
                                     @ Graphics.Gloss.Internals.Data.Picture.Picture
                                     Main.main7
                                     x6) })
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture)))) #)) -}
131d15b98da34c9400c595993f62d3db
  main7 ::
    (Graphics.Gloss.Internals.Data.Picture.Point,
     Graphics.Gloss.Internals.Data.Picture.Point)
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Graphics.Gloss.Internals.Data.Picture.Point,
                          Graphics.Gloss.Internals.Data.Picture.Point)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case ww2 of ww6 { (,) ww7 ww8 ->
                 Graphics.Gloss.Internals.Data.Picture.Polygon
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Point
                      (ww4, ww5)
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (ww4, ww8)
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Point
                            (ww7, ww8)
                            (GHC.Types.:
                               @ Graphics.Gloss.Internals.Data.Picture.Point
                               (ww7, ww5)
                               (GHC.Types.[]
                                  @ Graphics.Gloss.Internals.Data.Picture.Point))))) } } }) -}
eb3f15bbcf088e11398fa355b59651a4
  main8 :: Main.State
  {- Strictness: m,
     Unfolding: (Main.State
                   Main.initialPlayer
                   Main.main4
                   Main.main20
                   Main.main9) -}
0c02630a7acb5c7efce190a5b2a52efd
  main9 ::
    [((GHC.Types.Float, GHC.Types.Float),
      (GHC.Types.Float, GHC.Types.Float))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ((GHC.Types.Float, GHC.Types.Float),
                      (GHC.Types.Float, GHC.Types.Float))
                   Main.main15
                   Main.main10) -}
9eeaf428571e64b471c29f8ce76f7e94
  main_$sgo2 ::
    [GHC.Types.Float]
    -> GHC.Types.Float
    -> [GHC.Types.Float]
    -> [((GHC.Types.Float, GHC.Types.Float),
         (GHC.Types.Float, GHC.Types.Float))]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,1*U> -}
c312a01907b7565e286edf944831ff69
  main_go ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ea209e58e013f359503210c4006fff41
  main_go1 :: [GHC.Types.Float] -> [GHC.Types.Float]
  {- Arity: 1, Strictness: <S,1*U> -}
651bf1d7045481579c4bad1fe0b2bb2c
  playerPoints ::
    Main.State -> [Graphics.Gloss.Internals.Data.Picture.Point]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(U(U),U(U)),A,U(U(U),U(U)),A)>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.State) ->
                 case Main.$wplayerPoints w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Point
                   ww1
                   ww2 }) -}
instance GHC.Show.Show [Main.State] = Main.$fShowState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

